<?php

use Drupal\Core;
use Drupal\Core\StreamWrapper\PrivateStream;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Access\AccessResult;
use Symfony\Component\HttpFoundation\RedirectResponse;

const IFORM_BASE_RESOURCES = [
  'jquery',
  'jquery_ui',
  'indiciaFns'
];

// @todo Implement features review code?
// @todo Convert all variable_get and variable_set to non-version specific code, with a
//   fix for indicia_ or iform_ prefix inconsistencies.

/**
* Implements hook_help.
* Display help and module information.
* @param string $route_name The route as defined in the routing .yml file
* @param \Drupal\Core\Routing\RouteMatchInterface $route_match The current route match
* @return string Help text for the path
*/
function iform_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  $output = '';  //declare your output variable
  switch ($route_name) {
    case 'help.page.iform':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Generates Indicia powered data entry forms and reports.  <a href="!link">More info</a>.',
          array('!link' => 'http://indicia-docs.readthedocs.org/en/latest/site-building/iform/index.html')) . '</p>';
      return $output;
  }
  return $output;
}

/**
 * Implements hook_node_access.
 * Authentication for access to create, view and delete indicia form pages.
 * @param $op The operation to be performed
 * @param $node The node object
 * @param $account The user entity to check access for
 * @return \Drupal\Core\Access\AccessResultInterface The access result
 */
function iform_node_access(\Drupal\node\NodeInterface $node, $op,
                           \Drupal\Core\Session\AccountInterface $account, $langcode) {
  if ($type = $node->bundle() !== 'iform_page') {
    $allowed = TRUE;
  }
  else {
    switch ($op) {
      case 'create':
        $allowed = $account->hasPermission('create iform content');
        break;
      case 'view':
        if (isset($node->params['view_access_control']) && $node->params['view_access_control']) {
          // Use a per node setting to control access. Use default permission name iform access <nid>, or specified one from params if available
          if (!empty($node->params['permission_name']))
            $allowed = $account->hasPermission($node->params['permission_name']);
          else
            $allowed = $account->hasPermission('access iform ' . $node->id());
        }
        else {
          // Use the generic setting for Indicia forms to control access.
          $allowed = $account->hasPermission('access iform content');
        }
        break;
      case 'update':
      case 'delete':
        if ($account->hasPermission('edit any iform content', $account)) {
          $allowed = TRUE;
        }
        else {
          $allowed = $account->hasPermission('edit own iform content', $account)
            && ($account->id() == $node->getOwnerId());
        }
        break;
      default:
        $allowed = TRUE;
    }
  }
  return $allowed ? AccessResult::allowed() : AccessResult::forbidden();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter.
 * Modifies the Edit form for an Indicia page to add the controls required to
 * configure an Indicia page.
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 * @throws \exception
 */
function iform_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id==='node_iform_page_form' || $form_id==='node_iform_page_edit_form') {
    $node = $form_state->getFormObject()->getEntity();
    $iform = $node->field_iform->value;
    iform_load_helpers(array('form_helper'));
    // Define the new form fields
    $form['iform_forms'] = array(
      '#type' => 'details',
      '#title' => t('Form Selection'),
      '#weight' => 35
    );
    $config = \Drupal::config('indicia.settings');
    // @todo This needs to use $node to get the correct node specific connection
    $connection = iform_get_connection_details($node);
    $readAuth = form_helper::get_read_auth($connection['website_id'], $connection['password']);
    $form['iform_forms']['picker'] = array(
      '#markup' => SafeMarkup::set(form_helper::prebuilt_form_picker($readAuth, array(
        'form' => $iform,
        'website_id' => $connection['website_id'],
        'password' => $connection['password'],
        'needWebsiteInputs' => !$connection['using_drupal_vars'] || $config->get('allow_connection_override'),
        'available_for_groups' => $node->field_available_for_groups->value === '1',
        'limit_to_group_id' => isset($node->field_limit_to_group_id->value) ? $node->field_limit_to_group_id->value : NULL
      )))
    );
    if ($iform) {
      $form['form-params'] = array(
        '#markup' => SafeMarkup::set(form_helper::prebuilt_form_params_form(array(
          'form' => $iform,
          // @todo Load params properly from node
          'currentSettings' => $node->params,
          'readAuth' => form_helper::get_read_auth($connection['website_id'], $connection['password'])
        ))),
        '#prefix' => '<div id="form-params">',
        '#suffix' => '</div>',
        '#weight' => 36
      );
      form_helper::enable_validation('node-form');
    }
    else {
      $form['form-params'] = array(
        '#markup' => ' ', // must be a space or Drupal drops the div
        '#prefix' => '<div id="form-params">',
        '#suffix' => '</div>',
        '#weight' => 36
      );
    }
  }
}

/**
 * Returns true if there is a form on this site for editing groups. This allows group
 * related functionality to be turned on and off as appropriate.
 * @return boolean True if group edit pages exist on this site.
 * @todo Port back to Drupal 6 and 7 and commit changes to form_helper which call this.
 */
function iform_site_has_group_functionality() {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'iform_page')
    ->condition('field_iform', 'group_edit');
  $nids = $query->execute();
  return count($nids) > 0;
}

/**
 * Retrieves the parameters required by an iform and creates a JSON string to store
 * them in the database. The iform data must be in the $_POST array or in the node if
 * not in the $_POST.
 * @return string JSON encoded string containing the parameter values.
 */
function get_custom_param_values($node) {
  // We need to grab the parameter values for the custom parameters that were defined by the form.
  if (isset($_POST['iform']) && $_POST['iform']!=-1) {
    iform_load_helpers(array('form_helper'));
    ob_start();
    $params = form_helper::get_form_parameters($_POST['iform']);
    ob_end_clean();
    $idx=0;
    $values = array();
    // always want the website id and password
    $values['website_id']=$_POST['website_id'];
    $values['password']=$_POST['password'];
    // now get the rest of the parameters
    foreach ($params as $param) {
      if (isset($_POST[$param['fieldname']]))
        $values[$param['fieldname']] = $_POST[$param['fieldname']];
    }
    // Json encode the parameters to store them in the Drupal database.
    return json_encode($values);
  } 
  else {
    return json_encode($node->params);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave.
 * Saves iform specific information.
 */
function iform_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->bundle()==='iform_page' && isset($_POST['iform'])) {
    $iform = $_POST['iform'];
    $entity->field_iform->setValue($iform);
    $params=get_custom_param_values($entity);
    $entity->field_params->setValue($params);
    $entity->field_available_for_groups->setValue(
      empty($_POST['available_for_groups']) ? '0' : '1'
    );
    $entity->field_limit_to_group_id->setValue(
      empty($_POST['limit_to_group_id']) ? null : $_POST['limit_to_group_id']
    );
    // @todo needs_review?
    // @todo limit_to_group_id
  }
}

/**
* Implemenation of hook_load
* @param node object to load additional information for
* @return object with iform fields
*/
function iform_node_load($entities) {
  foreach ($entities as &$node) {
    if ($node->bundle()==='iform_page') {
      unset($node->params);
      $node->params = array();
      $params = json_decode($node->field_params->value, TRUE);
      if (function_exists('iform_user_ui_options_preprocess_iform')) {
        iform_user_ui_options_preprocess_iform($params);
      }
      if (!is_array($params)) {
        drupal_set_message(t('This page\'s configuration has not been stored correctly.') . ' ' .
          SafeMarkup::checkPlain(var_export($node->params, TRUE)), 'warning');
      }
      if (is_array($params)) {
        // Merge the params into the loaded object
        foreach ($params as $k => $v) {
          $node->params[$k] = $v;
        }
      }
    }
  }
}

/**
* Implemenation of hook_menu.
*
function iform_menu() {
  $items = array();
  // declare a registration path for public groups/activities
  $items['join'] = array(
    'file' => 'iform.groups.inc',
    'page callback' => 'iform_join_group',
    'access arguments' => array('access content'),
  );
  return $items;
}


/**
 * Implement hook_form_user_login_alter.
 * Adds instructions to the login form if accessed via a link given out to join a recording group.
 * @param $form
 * @param $form_state
 * @throws \exception
 *
function iform_form_user_login_alter(&$form, &$form_state) {
  if (!empty($_GET['group_id'])) {
    iform_load_helpers(array('data_entry_helper'));
    $auth = data_entry_helper::get_read_auth(variable_get('indicia_website_id'), variable_get('indicia_password'));
    $groups = data_entry_helper::get_population_data(array(
      'table' => 'group',
      'extraParams' => $auth + array(
          'view' => 'detail',
          'id' => $_GET['group_id'],
          'joining_method' => 'P',  // only public groups can be joined this way
          'website_id' => variable_get('indicia_website_id')
        ),
      'caching' => false
    ));
    if (count($groups)===1) {
      module_load_include('inc', 'iform', 'iform.groups');
      $group = $groups[0];
      $link = url("join/$group[url_safe_title]", array('absolute' => TRUE));
      $path = data_entry_helper::get_uploaded_image_folder();
      $img = empty($group['logo_path']) ? '' : "<img style=\"width: 20%; float: left; padding-right: 5%\" alt=\"Logo\" src=\"$path$group[logo_path]\"/>";
      $form['intro'] = array(
        '#markup' => "<fieldset><legend>$group[title]</legend>$img<div style=\"float: left; width: 70%\"><p>" .
          t('You\'ve followed a link to join the @group. This needs you to log in to @site.',
            array('@group' => iform_readable_group_title($group), '@site' => variable_get('site_name'))) . '</p><ul>' .
          '<li>' . t('If you already have an account on @site, then log in using the form below.', array('@site' => variable_get('site_name'))) . '</li>' .
          '<li>' . t('If this is your first time using @site, then click the Create new account link and follow the steps to register. Once you have ' .
            'confirmed your account please visit the join link you just used (<a href="@link">@link</a>) to join the @group.',
            array('@group' => iform_readable_group_title($group), '@site' => variable_get('site_name'), '@link' => $link)) .'</li></ul></div></fieldset>',
        '#weight' => -50
      );
    }
  }
}

/**
 * Utility method that gets the website_id and password appropriate to connect
 * a given node to the warehouse.
 * @param mixed $node A node object or nid.
 * @return array Connection details, including website_id and password. Also 
 * contains a boolean using_drupal_vars which is true if the site-wide 
 * configuration is being used.
 */
function iform_get_connection_details($node) {
  $r = array();
  // convert a nid to a node
  if (!is_object($node)) {
    $node = \Drupal\node\Entity\Node::load($node);
  }
  $config = \Drupal::config('indicia.settings');
  $r['website_id']=$config->get('website_id');
  $r['password']=$config->get('password');
  $r['using_drupal_vars'] = !empty($r['website_id']) && !empty($r['password']);
  // @todo Check that $node->params[] is the correct way to do this.
  if (empty($r['website_id']) || $config->get('allow_connection_override'))
    $r['website_id'] = isset($node->params['website_id']) ? $node->params['website_id'] : $r['website_id'];
  if (empty($r['password']) || $config->get('indicia_allow_connection_override'))
    $r['password'] = isset($node->params['password']) ? $node->params['password'] : $r['password'];
  return $r;
}

/**
 * Implementation for hook_view. Prepares the displayed Indicia page content.
 */
function iform_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity,
    \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode, $langcode) {
  if ($entity->bundle() === 'iform_page') {
    global $language;
    iform_load_helpers(array('data_entry_helper', 'form_helper'));
    // @todo Drupal 8 might allow us to be more intelligent rather than killing the entire page cache
    \Drupal::service('page_cache_kill_switch')->trigger();

    // @todo Handling of iform review mode

    $helperPath = realpath(iform_client_helpers_path());
    $iform = $entity->field_iform->value;
    if (!empty($iform)) {
      $nid = $entity->id();
      iform_load_language_files($iform, $nid);
      $language = \Drupal::service('language.default')->get();
      $args = array('language' => $language->getId());
      require_once "$helperPath/prebuilt_forms/$iform.php";
      ob_start();
      // also force the theme path to be local
      global $indicia_theme_path;
      $indicia_theme_path = iform_media_folder_path() . 'themes/';
      $connection = iform_get_connection_details($entity);
      $args['website_id'] = $connection['website_id'];
      $args['password'] = $connection['password'];
      // we need to grab each requested parameter from the node to pass to the form
      $params = form_helper::get_form_parameters($iform);

      foreach ($params as $param) {
        if (isset($entity->params[$param['fieldname']])) {
          $args[$param['fieldname']] = $entity->params[$param['fieldname']];
        }
        elseif (isset($param['default'])) // apply the default, this was an old saved form configuration which doesn't have a new parameter.
        {
          $args[$param['fieldname']] = $param['default'];
        }
      }
      $r = '';
      $response = NULL;
      // if the form defines some remembered fields, call it from within this module rather than inside
      // indicia so it can have access to the arguments
      if (method_exists("iform_$iform", 'indicia_define_remembered_fields')) {
        call_user_func(array(
          "iform_$iform",
          'indicia_define_remembered_fields'
        ), $args);
      }
      $r .= iform_handle_posted_form($entity, $args);

      // Make buttons have a hover effect
      data_entry_helper::$javascript .= "indiciaFns.enableHoverEffect();\n";
      $config = \Drupal::config('indicia.settings');
      _iform_apply_variables_to_args($args, $config);
      // preferred location for custom node configuration files now under Drupal files folder
      $filePath = hostsite_get_public_file_path();
      // A drupal theme can override the templates
      if (file_exists(\Drupal::theme()
          ->getActiveTheme()
          ->getPath() . '/indicia.templates.php')) {
        require \Drupal::theme()
            ->getActiveTheme()
            ->getPath() . '/indicia.templates.php';
      }
      // Or we can override the templates in the iform module, either globally, per form or per node.
      if (file_exists("$helperPath/prebuilt_forms/templates/global.php")) {
        require "$helperPath/prebuilt_forms/templates/global.php";
      }
      if (file_exists("$helperPath/prebuilt_forms/templates/$iform.php")) {
        require "$helperPath/prebuilt_forms/templates/$iform.php";
      }
      if (file_exists("$filePath/indicia/templates/node.$nid.php")) {
        require "$filePath/indicia/templates/node.$nid.php";
      }
      // link in custom additional template files
      if (!empty($args['additional_templates'])) {
        $templateFiles = data_entry_helper::explode_lines($args['additional_templates']);
        foreach ($templateFiles as $file) {
          $file = str_replace('{prebuiltformtemplates}', "$helperPath/prebuilt_forms/templates", $file);
          require $file;
        }
      }
      // Now retrieve the form content
      try {
        $r .= call_user_func(array(
          'iform_' . $iform,
          'get_form'
        ), $args, $entity->id(), $response);
      } catch (Exception $e) {
        \Drupal::logger('iform')->notice('Error occurred loading form');
        \Drupal::logger('iform')->notice($e->getMessage());
        \Drupal::logger('iform')->notice(print_r($e->getTrace(), TRUE));
      }
      ob_end_clean();
      $build['iform'] = array(
        '#markup' => SafeMarkup::set($r),
        '#weight' => 1,
        '#cache' => [
          'contexts' => [
            // The "current user" is used above, which depends on the request,
            // so we tell Drupal to vary by the 'user' cache context.
            // @todo Could we separate out the user specific content and token specific content
            // into a separate build array entry, then use JS to copy it into it's destinations?]
            // Then whole page can get cached
            'user',
          ],
          // @todo currently we've disabled caching until we work out handling of write tokens
          'max-age' => 0
        ],
      );

      // @todo Set page title is not working in Drupal 8 yet
      global $indicia_page_title;
      if (isset($indicia_page_title)) {
        $build['#title'] = $indicia_page_title;
      }
    }
  }
}

/**
 * When an Indicia form sends POST data back, this method handles the submission of the
 * data to the warehouse.
 * @param $node
 * @param $args
 * @return string|void
 */
function iform_handle_posted_form($node, $args) {
  $iform = $node->field_iform->value;
  $r = '';
  if ($_POST && (array_key_exists('website_id', $_POST)) && method_exists("iform_$iform", 'get_submission')) {
    $helperPath = realpath(iform_client_helpers_path());
    $nid = $node->id();
    if (!empty($_POST['delete-button'])) {
      $_POST['deleted'] = 't';
      $msg = lang::get('The record has been deleted.');
    }
    else {
      $msg = lang::get('Thank you. Your records have been saved to the database.');
    }
    // Ask the form to submit itself.
    try {
      // attach the path to the input form. It'll just get skipped if we are not posting a sample.
      $_POST['sample:input_form'] = trim(\Drupal::service('path.alias_manager')
        ->getAliasByPath("/node/$nid"), '/');
      $s = call_user_func(array(
        "iform_$iform",
        'get_submission'
      ), $_POST, $args, $nid);
    } catch (Exception $e) {
      \Drupal::logger('iform')
        ->notice('Exception occurred during build of form submission: ' . $e->getMessage());
      drupal_set_message(t('An error occurred whilst saving the new site details.'));
      unset($s);
    }
    // And allow the form to dynamically set the destination after post
    if (!empty($_POST['redirect_on_success'])) {
      $args['redirect_on_success'] = $_POST['redirect_on_success'];
    }
    if (method_exists("iform_$iform", 'get_redirect_on_success')) {
      $redirect = call_user_func(array(
        "iform_$iform",
        'get_redirect_on_success'
      ), $_POST, $args);
      if (!empty($redirect)) {
        $args['redirect_on_success'] = $redirect;
      }
    }
    // if for some reason the iform gives back an empty submission, ignore it
    if (isset($s) && $s) {
      $errors = array();
      // does this Drupal node have any in-built validation code?
      if (method_exists("iform_$iform", 'get_validation_errors')) {
        $errors = call_user_func(array(
          "iform_$iform",
          'get_validation_errors'
        ), $_POST, $args);
      }
      // does this Drupal node have any custom validation code?
      if (file_exists("$helperPath/prebuilt_forms/validation/validate.$nid.php")) {
        require_once "$helperPath/prebuilt_forms/validation/validate.$nid.php";
        $errors = array_merge($errors, iform_custom_validation($_POST));
      }
      if (!empty($errors)) {
        $r .= data_entry_helper::dump_errors(array('errors' => $errors));
      }
      else {
        $response = data_entry_helper::forward_post_to('save', $s);
        // Does the form redirect after success?
        if (is_array($response) && array_key_exists('success', $response) &&
          array_key_exists('redirect_on_success', $args) && $args['redirect_on_success']
        ) {
          if (!isset($args['message_after_save']) || $args['message_after_save']) {
            drupal_set_message($msg);
          }
          $parts = explode('?', $args['redirect_on_success'], 2);
          $url = array_shift($parts); // first item removed from array
          if (count($parts)) {
            $parts = explode('#', $parts[0], 2);
            $queryStr = array_shift($parts); // info between the ? and # is the query string
            // Get an array of the redirect_on_success specified query string params
            parse_str($queryStr, $params);
          }
          else {
            $parts = explode('#', $url, 2); // split bookmark fragment off
            $url = array_shift($parts);
            $params = array();
          }
          // Merge the information about the saved record in
          $params = array_merge(array(
            'table' => $response['outer_table'],
            'id' => $response['outer_id']
          ), $params);
          $options = array('query' => $params);
          // anything left in $parts is the bookmark
          if (count($parts)) {
            $options['fragment'] = $parts[0];
          }
          return hostsite_goto_page($url, $options);
        }
        elseif (!isset($args['message_after_save']) || $args['message_after_save'] || !array_key_exists('success', $response)) {
          // This dumps errors, and/or a success message if no redirection.
          $r .= data_entry_helper::dump_errors($response, TRUE);
        }
      }
    }
  }
  return $r;
}

/**
 * Implements hook_library_info_build.
 *
 * Dynamically build a set of Drupal 8 asset libraries. In Drupal 8, drupal_add_js and
 * drupal_add_css are removed with the definition of libraries to define the assets required
 * now the preferred way forward. This method creates a list of libraries that might be
 * required by the Indicia forms module, including libraries for the general client helper
 * code and libraries containing JS and CSS specific to each node.
 * @return array Libraries to create
 */
function iform_library_info_build() {
  $libraries = [];
  iform_build_client_helper_libraries($libraries);
  iform_build_node_specific_libraries($libraries);
  \Drupal::logger('iform')
    ->notice(var_export(array_keys($libraries), true));
  return $libraries;
}

/**
 * Creates the asset libraries for Drupal which provide the JS and CSS files for
 * client helper resource.
 * @param $libraries Array of library definitions to which the required libraries will
 * be appended.
 */
function iform_build_client_helper_libraries(&$libraries) {
  iform_load_helpers(array('data_entry_helper'));
  $resources = data_entry_helper::get_resources();
  $fullPaths = array(data_entry_helper::$css_path, data_entry_helper::$js_path, 'http://');
  $shortPaths = array('media/css/', 'media/js/', '//');
  foreach ($resources as $name => $def) {
    // some resources are always included, forcing the Drupal version of jQuery.
    if (in_array($name, IFORM_BASE_RESOURCES))
      continue;
    // skip the fancybox resource as we swap to v2
    if ($name==='fancybox')
      continue;
    $libraries[$name] = [
      'version' => 'VERSION'
    ];
    if (!empty($def['javascript'])) {
      $libraries[$name]['js'] = [];
      foreach ($def['javascript'] as $js) {
        $libraries[$name]['js'][str_replace($fullPaths, $shortPaths, $js)] = [];
      }
    }
    if (!empty($def['stylesheets'])) {
      $libraries[$name]['css'] = ['component' => []];
      foreach ($def['stylesheets'] as $css) {
        $libraries[$name]['css']['component'][str_replace($fullPaths, $shortPaths, $css)] = [];
      }
    }
    if (!empty($def['deps'])) {
      $libraries[$name]['dependencies'] = [];
      foreach ($def['deps'] as $dependency) {
        if (in_array($dependency, IFORM_BASE_RESOURCES))
          continue;
        $libraries[$name]['dependencies'][] = "iform/$dependency";
      }
    }
  }
}

/**
 * Creates the asset libraries for Drupal which provide the JS and CSS files specific
 * to each node.
 * @param $libraries Array of library definitions to which the required libraries will
 * be appended.
 */
function iform_build_node_specific_libraries(&$libraries) {
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'iform_page')
    ->execute();
  $node_storage = \Drupal::entityManager()->getStorage('node');
  $nodes = $node_storage->loadMultiple($nids);
  $helperPath = realpath(iform_client_helpers_path());
  $filePath = hostsite_get_public_file_path();
  foreach ($nodes as $node) {
    $nid = $node->id();
    $lib = "node_$nid";
    $form = $node->field_iform->value;
    $libraries[$lib] = [
      'version' => 'VERSION',
      'js' => [],
      'css' => [
        'component' => []
      ]
    ];
    // Prebuilt form specific CSS
    if (file_exists("$helperPath/prebuilt_forms/css/$form.css")) {
      $libraries[$lib]['css']['component']["client_helpers/prebuilt_forms/css/$form.css"] = [];
    }
    // Node specific CSS
    if (file_exists("$filePath/indicia/css/node.$nid.css")) {
      $libraries[$lib]['css']['component']["/$filePath/indicia/css/node.$nid.css"] = [];
    }
    if (!empty($node->params['additional_css'])) {
      $cssFiles = data_entry_helper::explode_lines($node->params['additional_css']);
      // @todo Theme path replacement
      // @todo Also need to implement way to get to public::indicia/css folder.
      foreach ($cssFiles as $file) {
        $file = str_replace(array(
          '{mediacss}',
          //'{theme}',
          '{prebuiltformcss}'
        ),
          array(
            iform_media_folder_path() . 'css',
            //path_to_theme(),
            iform_client_helpers_path() . 'prebuilt_forms/css'
          ),
          $file
        );
        $libraries[$lib]['css']['module'][$file] = [];
      }
    }
    // Prebuilt form specific JS
    if (file_exists("$helperPath/prebuilt_forms/js/$form.js")) {
      $libraries[$lib]['js']["client_helpers/prebuilt_forms/js/$form.js"] = [];
    }
    // Node specific JS
    if (file_exists("$filePath/indicia/js/node.$nid.js")) {
      $libraries[$lib]['js']["/$filePath/indicia/js/node.$nid.js"] = [];
    }
    // Extension classes can be referred to in the form structure parameter of any page
    // and can contain JS or CSS code in addition to the PHP class.
    if (!empty($node->params['structure'])) {
      if (preg_match('/\[[a-z_]+\.[a-z_]+\]/', $node->params['structure'], $extensions)) {
        foreach ($extensions as $extension) {
          preg_match('/\[(?P<class>[a-z_]+)/', $extension, $matches);
          if (file_exists("$helperPath/prebuilt_forms/extensions/$matches[class].js"))
            $libraries[$lib]['js']["client_helpers/prebuilt_forms/extensions/$matches[class].js"] = [];
          if (file_exists("$helperPath/prebuilt_forms/extensions/$matches[class].css")) {
            $libraries[$lib]['css']['component']["client_helpers/prebuilt_forms/extensions/$matches[class].css"] = [];
          }
        }
      }
    }
    // Skip any unnecessary empty libraries
    if (empty($libraries[$lib]['css']['module']) && empty($libraries[$lib]['js'])) {
      unset($libraries[$lib]);
    }
  }
}

/**
 * @todo Document
 * @param $args
 */
function _iform_apply_variables_to_args(&$args, $config) {
  _iform_apply_variable_to_args('map_centroid_lat', $args, $config);
  _iform_apply_variable_to_args('map_centroid_long', $args, $config);
  _iform_apply_variable_to_args('map_zoom', $args, $config);
  _iform_apply_variable_to_args('spatial_systems', $args, $config);
}

/**
 * @todo Document
 * @param $variable
 * @param $args
 * @param $config
 */
function _iform_apply_variable_to_args($variable, &$args, $config) {
  $default = $config->get($variable);
  if (isset($args[$variable]) && ($args[$variable] == t('default') || $args[$variable] == 'default' || $args[$variable] == '') && !empty($default)) {
    $args[$variable] = $default;
  }
}

/**
 * Implements hook_page_attachments().
 * For any page that has Indicia functionality, add all the scripts and CSS that
 * we require.
 */
function iform_page_attachments(array &$attachments) {
  if (class_exists('helper_base')) {
    $attachments['#attached']['library'][] = 'iform/base';
    foreach (helper_base::$required_resources as $resource) {
      // switch to Fancybox v2 since D8 always uses a more recent jQuery version than v1 supports
      if ($resource==='fancybox')
        $resource .= '2';
      // exclude resources covered by iform/base
      if (!in_array($resource, IFORM_BASE_RESOURCES)) {
        $attachments['#attached']['library'][] = "iform/$resource";
      }
    }
    $node = \Drupal::request()->attributes->get('node');
    if ($node) {
      $nid = $node->id();
      $attachments['#attached']['library'][] = "iform/node_$nid";
    }
  }
}

function iform_inlinejs_alter() {
  $js_asset = array();
  if (class_exists('helper_base')) {
    $script = helper_base::get_scripts(helper_base::$javascript, helper_base::$late_javascript,
      helper_base::$onload_javascript, FALSE, TRUE);
    if (!empty($script)) {
      $js_asset['header'][] = array(
        'data' => $script,
        'group' => JS_LIBRARY + 1,
      );
      /*
       * Don't do the following, as this gets called more than once for some reason
       * @todo Investigate why hook called several times
       */
      //helper_base::$javascript = '';
      //helper_base::$late_javascript = '';
      //helper_base::$onload_javascript = '';
    }
    return $js_asset;
  }
}

/**
 * Adds a jQuery closure around a piece of JavaScript for D7/8 compatibility.
 * @param type $js
 */
function iform_js_closure($js) {
  return "(function ($) {
$js
})(jQuery);";
}

/**
 * Returns true if the helper_config file exists.
 */
function iform_check_helper_config_exists() {
  // initial safety check for the presence of the helper_config file
  $path = iform_client_helpers_path();
  // we always need the helper_config file
  return file_exists("$path/helper_config.php");
}

/**
 * Loads language files defined for the form. This includes language files defined in the module folder or in the site specific
 * Drupal folders, and also includes files named with the form name or node nid.
 */
function iform_load_language_files($iform, $nid) {
  global $language, $custom_terms, $custom_term_overrides;
  $language = \Drupal::service('language.default')->get();
  $moduleLangFilePath = iform_client_helpers_path() . "prebuilt_forms/lang/";
  $siteSpecificLangFilePath = drupal_get_path('module', 'iform') . '/client_helpers/prebuilt_forms/lang/';
  $formLangFileName = $iform . '.' . $language->getId() . '.php';
  $nodeLangFileName = 'node.' . $nid . '.' . $language->getId() . '.php';
  $formFallbackFileName = $iform . '.en.php';
  $nodeFallbackFileName = 'node.' . $nid . '.en.php';
  // Define a priority ordered list of file names that could contain the custom terms list.
  if ($siteSpecificLangFilePath) {
    $langFiles = array(
      $siteSpecificLangFilePath . $nodeLangFileName,
      $siteSpecificLangFilePath . $formLangFileName,
      $siteSpecificLangFilePath . $nodeFallbackFileName,
      $siteSpecificLangFilePath . $formFallbackFileName
    );
  }
  else {
    $langFiles = array();
  }
  $langFiles = array_merge($langFiles, array(
    $moduleLangFilePath . $nodeLangFileName,
    $moduleLangFilePath . $formLangFileName,
    $moduleLangFilePath . $nodeFallbackFileName,
    $moduleLangFilePath . $formFallbackFileName
  ));
  $custom_terms = array(); // this is an array of key value pairs
  $custom_term_overrides = array(); // this is an array with each item a subarray of key value pairs.
  // start at the highest priority possible language file name and loop through until we find one that defines the set of custom terms.
  foreach ($langFiles as $langFile) {
    if (file_exists($langFile)) // Found a file to include. It might define custom_terms, or might define an entry in the custom_term_overrides array
    {
      require $langFile;
    }
    // finish when we have loaded an array of custom terms.
    if (count($custom_terms) > 0) {
      break;
    }
  }
  // if there are any custom term overrides, they need to be merged into custom terms in reverse priority order.
  $custom_term_overrides = array_reverse($custom_term_overrides);
  foreach ($custom_term_overrides as $override_list) {
    $custom_terms = array_merge($custom_terms, $override_list);
  }
}

/**
 * Method to load an array of helper classes. Also overrides any helper config settings
 * for those classes from drupal variable settings.
 * @param array $files List of helper class names to load.
 */
function iform_load_helpers(array $files) {
  $configLoaded = class_exists('helper_config');
  $config = \Drupal::config('indicia.settings');
  if (!is_array($files)) {
    throw new exception('Call to iform_load_helpers must pass an array of helper file names');
  }
  $path = iform_client_helpers_path();
  require_once $path . 'helper_base.php';
  foreach ($files as $file) {
    require_once "$path$file.php";
  }
  // we always need the helper_config file
  if (!$configLoaded) {
    require_once $path . 'helper_config.php';
    // now we have an opportunity to load warehouse settings into helper_config from the drupal variables. So a module
    // could load a different warehouse per page.
    if (function_exists('iform_load_warehouse_details')) {
      iform_load_warehouse_details();
    }
    else {
      helper_config::$base_url = $config->get('base_url');
      helper_config::$geoserver_url = $config->get('geoserver_url');
    }
    if (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS']!=='off') {
      helper_config::$base_url = preg_replace('/^http:/', 'https:', helper_config::$base_url);
      helper_config::$geoserver_url = preg_replace('/^http:/', 'https:', helper_config::$geoserver_url);
    }
    if (!helper_base::$cache_folder) {
      // path unique to the warehouse, so no problems if we switch warehouse
      $folder = preg_replace("/[^a-zA-Z0-9]+/", "", helper_base::$base_url);
      // cache folder into private file path if specified as its more secure, otherwise public.
      $filepath = PrivateStream::basePath();
      if (!$filepath) {
        $filepath = PublicStream::basePath();
      }
      if (!$filepath) {
        $fiepath = conf_path() . '/files';
      }
      helper_base::$cache_folder = "$filepath/indicia/cache/$folder/";
      if (!is_dir(helper_base::$cache_folder)) {
        mkdir(helper_base::$cache_folder, 0777, TRUE);
      }
    }
    // interim_image_folder
    // final_image_folder
    // indicia_upload_path
    // max_upload_size
    helper_config::$geoplanet_api_key = $config->get('geoplanet_api_key');
    helper_base::$google_api_key = $config->get('google_api_key');
    // bing api key may be ommitted for backwards compatibility reasons
    if (isset(helper_config::$bing_api_key)) {
      helper_config::$bing_api_key = helper_base::$bing_api_key = $config->get('bing_api_key');
    }
  }
  // ensure css and js is loaded locally
  helper_base::$js_path = base_path() . iform_media_folder_path() . 'js/';
  helper_base::$css_path = base_path() . iform_media_folder_path() . 'css/';
  helper_base::$images_path = base_path() . iform_media_folder_path() . 'images/';
  if ($config->get('private_warehouse')) {
    $relative_proxy_path = iform_client_helpers_path() . 'proxy.php?url=' . helper_base::$base_url;
    // convert to absolute by removeing the leading '.' and prepending the base URL
    global $base_url;
    helper_base::$warehouse_proxy = $base_url . substr($relative_proxy_path, 1);
  }
}

/**
 * Method to find the media folder - either in the module or library path.
 */
function iform_media_folder_path() {
  // avoid multiple is_dir calls
  static $_iform_media_folder_path;
  if (isset($_iform_media_folder_path)) {
    return $_iform_media_folder_path;
  }
  else {
    $r = drupal_get_path('module', 'iform') . '/media/';
    if (!is_dir($r)) {
      $r = str_replace('modules', 'libraries', $r);
    }
    $_iform_media_folder_path = $r;
    return $r;
  }
}

/**
 * Method to find the client helpers folder - either in the module or library path.
 */
function iform_client_helpers_path() {
  // avoid multiple is_dir calls
  static $_iform_client_helpers_path;
  if (isset($_iform_client_helpers_path)) {
    return $_iform_client_helpers_path;
  }
  else {
    $path = drupal_get_path('module', 'iform') . '/client_helpers/';
    // if not in subfolder of the module, then it has been moved to libraries
    if (!is_dir($path)) {
      $path = str_replace('/modules/', '/libraries/', $path);
    }
    $_iform_client_helpers_path = $path;
    return $path;
  }
}

/**
 * Function that allows Indicia code to hook into the Drupal user fields to find out a field value, without
 * introducing a Drupal code dependency.
 * @global type $user
 * @param string $field Name of a user field to return. This can be 'language' which returns a user's 2 character language code,
 * 'id' to return the user's ID, 'name' to return the username, or a profile field, e.g. indicia_user_id as introduced by the Easy Login feature. This will be converted
 * to the profile field name if not prefixed with 'profile_'.
 * @param mixed $default Default value to return if not set.
 * @param boolean $array Set to true if this field allows multiple values so you need an array
 * @param type $uid User ID of user to load data for. Defaults to current user.
 * @return mixed
 * @todo Search client_helpers for references to global $user and uid
 */
function hostsite_get_user_field($field, $default = FALSE, $array = FALSE, $uid = FALSE) {
  $account = \Drupal::currentUser();
  if ($field === 'uid' || $field === 'id') {
    return $uid === FALSE ? $account->id() : $uid;
  }
  // do we need to load a different user account, e.g. if viewing another user's details?
  $differentUser = ($uid !== FALSE && $uid !== $account->id());
  $uid = ($uid === FALSE) ? $account->id() : $uid;
  $account = \Drupal\user\Entity\User::load($uid);
  // Only load the account's language if inspecting another user, else use the UI language.
  if ($field === 'language') {
    // @todo Test loading user's language under i18n environment
    if (isset($account->language) && $differentUser) {
      return $account->language->getId();
    }
    else {
      global $language;
      return $language->getId();
    }
  }
  elseif ($field === 'name') {
    return $account->getUsername();
  }
  elseif ($field === 'mail') {
    return $account->getEmail();
  }
  $fieldname = (substr($field, 0, 6) === 'field_' ? '' : 'field_') . $field;
  if (isset($account->$fieldname)) {
    // @todo Test what happens if a multi-value field
    return $account->$fieldname->value;
  }
  else {
    return $default;
  }
}

/**
 * Function that allows Indicia code to hook into the Drupal user profile to set a field value, without
 * introducing a Drupal code dependency.
 * @global type $user
 * @param type $field The name of a profile field.
 * @param type $data The data to be saved into the field.
 * @return boolean Returns false if the uid or field is not available so data cannot be written
 *
 * function hostsite_set_user_field($field, $data) {
 * global $user;
 * if ($user->uid) {
 * $fieldname = (substr($field, 0, 6)==='field_' ? '' : 'field_') . $field;
 * $account = user_load($user->uid);
 * if (!isset($account->$fieldname))
 * return FALSE;
 * $field = $account->$fieldname;
 * $language = $account->language ? $account->language : 'und';
 * if (isset($field[$language]))
 * $field[$language][0]['value'] = $data;
 * else
 * $field[$language]=array(array('value' => $data));
 * $account->$fieldname = $field;
 * $info = field_info_field($fieldname);
 * $fields = array($info['id']);
 *
 * // Execute the storage function
 * field_sql_storage_field_storage_write('user', $account, 'update', $fields);
 *
 * // Clear field cache
 * cache_clear_all("field:user:$account->uid", 'cache_field');
 * return TRUE;
 * }
 * return FALSE;
 * }
 *
 * /**
 * Enable a library in rhw host website.
 * @param string $library Name of the library. The following are supported:
 *
 * collapse - To enable collapsible fieldsets. Requires the class collapsible to be added to a fieldset.
 * jquery-ui - Adds the jQuery ui library with tab and datepicker support.
 *
 * function hostsite_add_library($library) {
 * switch ($library) {
 * case 'collapse':
 * drupal_add_library('system', 'drupal.form');
 * drupal_add_library('system', 'drupal.collapse');
 * break;
 * case 'jquery-ui':
 * drupal_add_library('system', 'jquery-ui');
 * drupal_add_library('system', 'ui.datepicker');
 * drupal_add_library('system', 'ui.tabs');
 * drupal_add_library('system', 'ui.progressbar');
 * drupal_add_library('system', 'ui.sortable');
 * drupal_add_library('system', 'ui.dialog');
 * drupal_add_library('system', 'effects.fade');
 * drupal_add_library('system', 'effects.slide');
 * break;
 * default:
 * \Drupal::logger('iform')->notice("Unknown library requested: $library");
 * }
 * }
 *
 * /**
 * Display a message in a way that can be unhooked from Drupal.
 * @param string $msg Message to display
 * @param string $type Message type, one of 'status', 'warning' and 'error'.
 */
function hostsite_show_message($msg, $type = 'status') {
  drupal_set_message($msg, $type);
}

/**
 * Set a breadcrumb trail in the host site.
 * @param array $breadcrumb An associative array where keys are untranslated breadcrumb
 * terms and values are the page to go to. The home page is automatically inserted at the
 * start and the current page at the end.
 *
 * function hostsite_set_breadcrumb($breadcrumb) {
 * // convert to Drupal style breadcrumb array
 * $drupal_breadcrumb = array(l(lang::get('Home'),'<front>'));
 * foreach ($breadcrumb as $label => $path) {
 * $drupal_breadcrumb[] = l(lang::get($label), $path);
 * }
 * // add current page
 * $drupal_breadcrumb[] = drupal_get_title();
 * drupal_set_breadcrumb($drupal_breadcrumb);
 * }
 *
 * /**
 * Set the page title in the host site.
 * @param string $title The translated page title.
 */
function hostsite_set_page_title($title) {
  global $indicia_page_title;
  $indicia_page_title = $title;
}

/**
 * Retrieves the current node page's title
 * @todo Ensure replicated in D6 & 7
 * @param $nid Node ID
 * @return string
 */
function hostsite_get_page_title($nid) {
  global $indicia_page_title;
  if (isset($indicia_page_title)) {
    return $indicia_page_title;
  }
  $node = \Drupal\node\Entity\Node::load($nid);
  return $node->getTitle();
}

/**
 * Get's a field value for the current node.
 * @param integer $nid The Node ID
 * @param string $field The field name
 * @return mixed The field value
 */
function hostsite_get_node_field_value($nid, $field) {
  $node = \Drupal\node\Entity\Node::load($nid);
  // @todo Test, document, copy to D6 & 7
  if ($field === 'params') {
    return $node->params;
  }
  else {
    if ($field !== 'title' && $field !== 'body' && !preg_match('/^field_/', $field)) {
      $field = "field_$field";
    }
    // @todo Do we need this test?
    if (!isset($node->$field)) {
      drupal_set_message("Could not find $field");
      return FALSE;
    }

    return $node->$field->value;
  }
}

/**
 * Goto a page on the host site.
 * @param string $path The page path.
 * @param array $params The params to add to the URL.
 */
function hostsite_goto_page($path, $params = FALSE) {
  static $iform_redirected_to;
  if ($path === $iform_redirected_to) {
    drupal_set_message("Attempt to redirect to $path caused a redirect loop");
  }
  else {
    $response = hostsite_get_url($path, $params);
    $response->send();
    return;
  }
}

/**
 * Goto a page on the host site.
 * @param string $path The page path.
 * @param array $params The params to add to the URL.
 */
function hostsite_get_url($path, $params = FALSE) {
  // @todo Does <front> need special handling?
  $opts = array();
  if ($params) {
    $opts['query'] = $params;
  }
  return new RedirectResponse(\Drupal\Core\Url::fromUri("base:$path", $opts)
    ->toString());
}

/**
 * Retrieve a configuration value, e.g. site name or site mail, or an indicia setting.
 * @param string $context Context of the variable, either site or iform.
 * @param string $name Name of the config value to retrieve, e.g. name or mail.
 * @param mixed $default The default value to return if the config key does not exist.
 * @return mixed The config value.
 */
function hostsite_get_config_value($context, $name, $default = FALSE) {
  $configName = $context === 'site' ? 'system.site' : 'iform';
  $r = \Drupal::config($configName)->get($name);
  return $r === NULL ? $default : $r;
}

/**
 * Retrieves a path suitable for storing public files (the Drupal public file path).
 * @return string The path to the location for public file storage
 */
function hostsite_get_public_file_path() {
  return PublicStream::basePath();
}

/**
 * Returns a list of website IDs that this website is allowed use data for. This is defined by the agreement between the
 * 2 websites and depends on the exact task being performed.
 * @param array $readAuth Read authorisation tokens
 * @param string $purpose One of reporting, peer_review, verification, data_flow, moderation. Default is 'reporting'. If the
 * agreement defines that the other website provides data to this website for this purpose, then the other website is included.
 * @return array List of website IDs that accesss is allowed for.
 */
function iform_get_allowed_website_ids($readAuth, $purpose = 'reporting') {
  $websites = data_entry_helper::get_population_data(array(
    'table' => 'website',
    'extraParams' => $readAuth + array('sharing' => $purpose),
  ));
  $websiteIds = array();
  foreach ($websites as $website) {
    $websiteIds[] = $website['id'];
  }
  return $websiteIds;
}

/**
 * Implement hook_variable_info.
 * Returns information about the variables declared by this module, allowing an admin interface
 * to be created. We use a couple of custom extensions to allow these to be added to the Indicia
 * settings page.
 *
 * function iform_variable_info($options) {
 * $variable['iform_master_checklist_id']=array(
 * 'title'=>t('Master species checklist'),
 * 'description'=>t('Select the species checklist used as an all species hierarchy.'),
 * 'type'=>'number',
 * 'subtype'=>'taxon_list.title',
 * 'default'=>'',
 * 'addToIndiciaSettingsPage'=>true
 * );
 * return $variable;
 * }
 *
 * /**
 * Test whether update needs to run.
 * @return boolean TRUE if update needed else FALSE.
 *
 * function iform_needs_update() {
 * $needs_update = &drupal_static(__FUNCTION__);
 * if (!isset($needs_update)) {
 * include_once DRUPAL_ROOT . "/includes/install.inc";
 * $version = drupal_get_installed_schema_version('iform');
 * if($version > 0 && $version < 7100) {
 * // Have to run update before iform_load() query can execute.
 * $message = t('The IForm module needs you to run '
 * . '<a href="@url">updates</a> now.', array('@url' => url('update.php')));
 * drupal_set_message($message, 'warning', FALSE);
 * $needs_update = TRUE;
 * }
 * else {
 * $needs_update = FALSE;
 * }
 * }
 * return $needs_update;
 *
 * }
 *
 * /**
 * Implements hook_token_info.
 * Extends the tokens available to support some tokens useful in the Indicia context,
 * for example a full page URL including the query parameters or a page image that is
 * dynamically set on pages that show record images. The following tokens are provided:
 *
 *   * [current-page:full-url] Full URL to the current page, including query parameters
 *   * [current-page:live-title] Title of the current page, reflecting changes made when calling drupal_set_title.
 *   * [current-page:best-image] Image for the page - normally the site logo, but can be overridden with a record
 *     image for example.
 *
 * @return array
 */
function iform_token_info() {
  $info = array();
  $info['types']['current-iform-page'] = array(
    'name' => t('Current IForm page'),
    'description' => t('Tokens related to the current Indicia page.'),
  );

  $info['tokens']['current-iform-page'] = array(
    'full-url' => array(
      'name' => t('Full URL'),
      'description' => t('Full URL including the page query string parameters, excluding pagination and sort info.')
    ),
    'title' => array(
      'name' => t('Title'),
      'description' => t('Page title reflecting changes for dynamically generated pages.')
    ),
    'image' => array(
      'name' => t('Image'),
      'description' => t('Either the site logo, or an image picked from the content to represent the page.')
    ),
    'description' => array(
      'name' => t('Description'),
      'description' => t('Either the node summary, or a description set by the Indicia page.')
    ),
    'latitude' => array(
      'name' => t('Latitude'),
      'description' => t('Latitude of the data shown on an Indicia page where relevant.')
    ),
    'longitude' => array(
      'name' => t('Longitude'),
      'description' => t('Longitude of the data shown on an Indicia page where relevant.')
    ),
  );
  return $info;
}

/**
 * Implement hook_tokens.
 * Returns the values of tokens provided by the iform module.
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 * @return array
 */
function iform_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'current-iform-page') {
    global $iform_page_metadata;
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'full-url':
          $uriParts = explode('?', $_SERVER['REQUEST_URI']);
          if (count($uriParts) > 1) {
            parse_str($uriParts[1], $query);
            // we need to remove sort and paging parameters as they cause search engines to excessively spider
            foreach ($query as $key => $value) {
              if (strpos($key, 'orderby') === 0 || strpos($key, 'sortdir') === 0 || strpos($key, 'page') === 0) {
                unset($query[$key]);
              }
            }
            $uriParts[1] = data_entry_helper::array_to_query_string($query);
          }
          $uri = implode('?', $uriParts);
          $replacements[$original] = "http://$_SERVER[HTTP_HOST]$uri";
          break;
        case 'title':
          $replacements[$original] = drupal_get_title();
          break;
        case 'image':
          global $iform_page_metadata;
          if (isset($iform_page_metadata) && isset($iform_page_metadata['image'])) {
            $replacements[$original] = $iform_page_metadata['image'];
          }
          else {
            $replacements[$original] = theme_get_setting('logo');
          }
          break;
        case 'description':
          if (isset($iform_page_metadata) && isset($iform_page_metadata['description'])) {
            $replacements[$original] = $iform_page_metadata['description'];
          }
          else {
            // Copy of the code for the node:summary token as a fallback
            if (!empty($data['node'])) {
              $node = $data['node'];
              if ($items = field_get_items('node', $node, 'body', LANGUAGE_NONE)) {
                $instance = field_info_instance('node', 'body', $node->type);
                $field_langcode = field_language('node', $node, 'body', LANGUAGE_NONE);
                // If the summary was requested and is not empty, use it.
                if ($name == 'summary' && !empty($items[0]['summary'])) {
                  $output = _text_sanitize($instance, $field_langcode, $items[0], 'summary');
                }
                // Attempt to provide a suitable version of the 'body' field.
                else {
                  $output = _text_sanitize($instance, $field_langcode, $items[0], 'value');
                  // A summary was requested.
                  if ($name == 'summary') {
                    if (isset($instance['display']['teaser']['settings']['trim_length'])) {
                      $trim_length = $instance['display']['teaser']['settings']['trim_length'];
                    }
                    else {
                      // Use default value.
                      $trim_length = NULL;
                    }
                    // Generate an optionally trimmed summary of the body field.
                    $output = text_summary($output, $instance['settings']['text_processing'] ? $items[0]['format'] : NULL, $trim_length);
                  }
                }
                $replacements[$original] = $output;
              }
            }
          }
          break;
        case 'latitude':
          if (!empty($iform_page_metadata['latitude'])) {
            $replacements[$original] = $iform_page_metadata['latitude'];
          }
          break;
        case 'longitude':
          if (!empty($iform_page_metadata['longitude'])) {
            $replacements[$original] = $iform_page_metadata['longitude'];
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Switches the OpenGraph type to a landmark if we have lat long metadata for the page.
 * @param $output
 * @param $instance
 * @param $options
 *
function iform_metatag_metatags_view_alter(&$output, $instance, $options) {
  if ($instance==='node:iform') {
    global $iform_page_metadata;
    if (!empty($iform_page_metadata['latitude']) && !empty($iform_page_metadata['longitude'])) {
      $output['og:type']['#attached']['drupal_add_html_head'][0][0]['#value'] = 'place';
      $output['og:latitude']['#attached']['drupal_add_html_head'][0][0]['#name'] = 'place:location:latitude';
      $output['og:longitude']['#attached']['drupal_add_html_head'][0][0]['#name'] = 'place:location:longitude';
      unset($output['article:published_time']);
      unset($output['article:modified_time']);
    }

  }
}
*/